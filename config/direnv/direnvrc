# direnv global configuration

# Python virtualenv support
layout_python() {
  local python=${1:-python3}
  [[ $# -gt 0 ]] && shift
  unset PYTHONHOME
  if [[ -n $VIRTUAL_ENV ]]; then
    VIRTUAL_ENV=$(realpath "${VIRTUAL_ENV}")
  else
    local python_version
    python_version=$("$python" -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
    if [[ -z $python_version ]]; then
      log_error "Could not detect Python version"
      return 1
    fi
    VIRTUAL_ENV=$PWD/.venv
  fi
  export VIRTUAL_ENV
  if [[ ! -d $VIRTUAL_ENV ]]; then
    log_status "no venv found; creating $VIRTUAL_ENV"
    "$python" -m venv "$VIRTUAL_ENV"
  fi
  PATH="${VIRTUAL_ENV}/bin:${PATH}"
  export PATH
}

# Node.js version management
use_node() {
  local version=$1
  if [[ -f .nvmrc && -z $version ]]; then
    version=$(<.nvmrc)
  fi
  
  if has volta; then
    volta install "node@${version}"
  elif has nvm; then
    nvm use "$version"
  fi
}

# Golang version management
use_golang() {
  local version=$1
  if [[ -f .go-version && -z $version ]]; then
    version=$(<.go-version)
  fi
  
  if has g; then
    g install "$version" && g use "$version"
  fi
}

# AWS profile
use_aws() {
  local profile=${1:-default}
  export AWS_PROFILE=$profile
}